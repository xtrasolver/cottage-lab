substitutions:
  name: esp32-poe-09
  friendly_name: esp32-poe-09
  frequency: "6"

<<: !include esp-32-poe.yaml

# Enable time component to reset energy at midnight
time:
  - platform: sntp
    id: my_time
    timezone: Europe/Prague

output:
  - id: batery_activity
    platform: gpio
    pin: GPIO4

  - id: inverter_activity
    platform: gpio
    pin: GPIO16

sensor:
  - platform: template
    name: "Processing time"
    device_class: duration
    unit_of_measurement: ms
    id: processing_time


mqtt:
  broker: emqx.k8s1.cottage.my-lab.cz
  port: 1883
  username: !secret mqtt_username
  password: !secret mqtt_password
  on_json_message:
    - topic: homeassistant/sensor/pylontech_rack_0/state
      then:
        - output.turn_on: batery_activity
        - delay: 10ms
        - output.turn_off: batery_activity
        # - lambda: |
        #     struct timeval tv;
        #     gettimeofday(&tv, NULL);
        #     int received_timestamp = tv.tv_sec;

        #     ESP_LOGD("on_json_message", "received_timestamp          %d", received_timestamp);

        #     if (x.containsKey("begin_read_timestamp")){
        #       //ESP_LOGD("on_json_message", "begin_read_timestamp        %s", x["begin_read_timestamp");

        #       // int begin_read_timestamp        = (int)x["begin_read_timestamp"];
              
        #       // int processing_time = received_timestamp - begin_read_timestamp;

        #       // ESP_LOGD("on_json_message", "begin_read_timestamp        %d", begin_read_timestamp);
        #       // ESP_LOGD("on_json_message", "processing_time             %d", processing_time);

        #       //id(processing_time).publish_state(pylontech_processing_time);
        #     }
    - topic: homeassistant/sensor/inverter_96352107100030/state
      then:
        # - lambda: |
        #     struct timeval tv;
        #     gettimeofday(&tv, NULL);
        #     int received_timestamp = tv.tv_sec;

        #     ESP_LOGD("on_json_message", "received_timestamp          %d", received_timestamp);

        #     if (x.containsKey("begin_read_timestamp")){
        #       int begin_read_timestamp        = (int)x["begin_read_timestamp"];
              
        #       int processing_time = received_timestamp - begin_read_timestamp;

        #       ESP_LOGD("on_json_message", "begin_read_timestamp        %d", begin_read_timestamp);
        #       ESP_LOGD("on_json_message", "processing_time             %d", processing_time);

        #       //id(processing_time).publish_state(processing_time);
        #     }

        - output.turn_on: inverter_activity
        - delay: 10ms
        - output.turn_off: inverter_activity
       
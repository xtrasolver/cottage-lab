substitutions:
  device_name:        "todo"
  friendly_name:      "todo"
  upper_device_name:  "Gosund SP111"

  # Higher value gives lower watt readout
  current_resistor:   "0.0012"

  # Lower value gives lower voltage readout. In my case of about 15 of those devices this value is closest to my voltage meter
  voltage_divider:    "771"

esphome:
  name:                 ${device_name}
  friendly_name:        ${friendly_name}
  platform:             ESP8266
  board:                esp8285
  name_add_mac_suffix:  false
  project:
    name:     esphome.mole-automation
    version:  "1.0"

  # This allows the device to restore the last saved relay state, either "ON" or "OFF" for the switch later in this config
  esp8266_restore_from_flash: true

preferences:
  flash_write_interval: 1min  # set to 5min to prevent wearing out the onboard flash module too quickly
  
# Enable logging
logger:
  baud_rate: 0
  
# Enable Home Assistant API
mqtt:
  broker: emqx.k8s1.cottage.my-lab.cz
  port: 1883
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery_unique_id_generator: mac

ota:
  platform: esphome

wifi:
  ssid:         !secret wifi_name
  password:     !secret wifi_password
  fast_connect: on

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid:       "${device_name} Fallback Hotspot"
    password:   !secret wifi_hotspot_password

  domain:       .esphome-devices.local

# see: https://esphome.io/components/time.html
time:
  - platform: sntp
    id: my_time
    timezone: Europe/Prague

# Enable Web server
web_server:
  port: 80
  auth:
    username: admin
    password: !secret web_server_password

text_sensor:
  - platform: version
    name: "${device_name} - Version"
    icon: mdi:cube-outline

binary_sensor:
  - platform: status
    name: "${device_name} - Status"
    device_class: connectivity

  # toggle relay on/off
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: True
    id: "${device_name}_button_state"
    on_press:
      - switch.toggle: button_switch

sensor:
  - platform: wifi_signal
    name: "${device_name} - Wifi Signal"
    update_interval: 60s
    icon: mdi:wifi

  - platform: uptime
    name: "${device_name} - Uptime"
    update_interval: 60s
    icon: mdi:clock-outline

  - platform: total_daily_energy
    name: "${device_name} - Todays Usage"
    power_id: "power_wattage"
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh
    icon: mdi:calendar-clock

  - platform: adc
    pin: VCC
    name: "${device_name} - VCC Volt"
    icon: mdi:flash-outline

  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO05
    cf1_pin: GPIO04
    change_mode_every: 4
    current_resistor: ${current_resistor}
    voltage_dividerider: ${voltage_divider}
    update_interval: 3s

    current:
      name: "${device_name} - Ampere"
      unit_of_measurement: A
      accuracy_decimals: 3
      icon: mdi:current-ac

    voltage:
      name: "${device_name} - Volt"
      unit_of_measurement: V
      accuracy_decimals: 1
      icon: mdi:flash-outline

    power:
      name: "${device_name} - Watt"
      unit_of_measurement: W
      id: "power_wattage"
      icon: mdi:gauge

status_led:
  pin:
    number: GPIO02
    inverted: True
  id: led_blue

output:
  - platform: gpio
    pin: GPIO00
    inverted: true
    id: led_red

switch:
  - platform: template
    name: "${device_name} - Switch"
    icon: mdi:power
    optimistic: true
    # This is where the "restore_from_flash" comes in. I set it to try to restore from flash and, if that fails, set it to ON
    restore_mode: RESTORE_DEFAULT_ON
    lambda: 'return id(relay).state;'
    id: button_switch
    turn_on_action:
      - switch.turn_on: relay
      - output.turn_on: led_red
    turn_off_action:
      - switch.turn_off: relay
      - output.turn_off: led_red
  - platform: gpio
    pin: GPIO15
    id: relay